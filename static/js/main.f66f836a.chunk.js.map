{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","id","userId","title","completed","query","status","defaultFilters","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","todoList","openedTodo","queryFilter","toLowerCase","dispatch","filterTodos","useCallback","active","includes","all","filteredTodos","useMemo","length","className","map","classNames","onClick","TodoFilter","setQuery","onSubmit","event","preventDefault","onChange","e","target","value","placeholder","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","error","setError","selectedUser","setSelectedUser","useEffect","loadData","a","user","href","email","name","App","setTodos","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f66f836a.chunk.js","sourcesContent":["export enum Status {\n  active = 'active',\n  completed = 'completed',\n  all = 'all',\n}\n","import { Todo } from '../types/Todo';\n\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return {\n        id: action.payload.id,\n        userId: action.payload.userId,\n        title: action.payload.title,\n        completed: action.payload.completed,\n      };\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetQueryAction = {\n  type: 'query/SET';\n  payload: string;\n};\n\ntype SetStatusAction = {\n  type: 'status/SET';\n  payload: string;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'status/SET',\n  payload: status,\n});\n\nexport const actions = { setQuery, setStatus };\n\ntype State = {\n  query: string,\n  status: string,\n};\ntype Action = SetQueryAction | SetStatusAction;\n\nconst defaultFilters: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: State = defaultFilters,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'status/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET';\n  payload: Todo[];\n};\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype State = Todo[];\ntype Action = SetTodosAction;\n\nconst todosReducer = (\n  state: State = [],\n  action: Action,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React, { useCallback, useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Status } from '../../types/Status';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const todoList = useAppSelector(state => state.todos);\n  const openedTodo = useAppSelector(state => state.currentTodo);\n  const filter = useAppSelector(state => state.filter);\n  const queryFilter = filter.query.toLowerCase();\n  const dispatch = useAppDispatch();\n  const setTodo = (value: Todo) => dispatch(actions.setTodo(value));\n\n  const filterTodos = useCallback(() => {\n    switch (filter.status) {\n      case Status.active:\n        return todoList.filter(todo => !todo.completed\n          && todo.title.toLowerCase()\n            .includes(queryFilter));\n\n      case Status.completed:\n        return todoList.filter(todo => todo.completed\n          && todo.title.toLowerCase()\n            .includes(queryFilter));\n\n      case Status.all:\n      default:\n        return todoList.filter(todo => todo.title.toLowerCase()\n          .includes(queryFilter));\n    }\n  }, [filter, todoList]);\n\n  const filteredTodos = useMemo(filterTodos, [filterTodos]);\n\n  return (\n    filteredTodos.length === 0\n      ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )\n      : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {filteredTodos.map(({\n              id, completed, title, userId,\n            }) => (\n              <tr\n                data-cy=\"todo\"\n                key={id}\n                className={classNames(\n                  {\n                    'has-background-info-light':\n                      openedTodo && openedTodo.id === id,\n                  },\n                )}\n              >\n                <>\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames(\n                        {\n                          'has-text-success': completed,\n                          'has-text-danger': !completed,\n                        },\n                      )}\n                    >\n                      {title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setTodo(\n                        {\n                          id,\n                          title,\n                          completed,\n                          userId,\n                        },\n                      )}\n                    >\n                      <span className=\"icon\">\n                        <i className={classNames(\n                          'far',\n                          {\n                            'fa-eye-slash': openedTodo\n                              && openedTodo.id === id,\n                            'fa-eye': !openedTodo || openedTodo.id !== id,\n                          },\n                        )}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )\n  );\n};\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport './TodoFilter.scss';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const setStatus = (status: string) => dispatch(actions.setStatus(status));\n  const setQuery = (query: string) => dispatch(actions.setQuery(query));\n  const query = useAppSelector(state => state.filter.query);\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => setStatus(e.target.value)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={(e) => setQuery(e.target.value)}\n          value={query}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query.length > 0 && (\n          <span className=\"icon is-right isClickable\">\n            <button\n              data-cy=\"clearSearchButton\"\n              aria-label=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => setQuery('')}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\nconst BASE_URL\n  = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  const fullURL = `${BASE_URL + url}.json`;\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useState, useEffect } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const remove = () => dispatch(actions.removeTodo());\n  const openedTodo = useAppSelector(state => state.currentTodo);\n  const [error, setError] = useState<string>('');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    const loadData = async () => {\n      if (openedTodo) {\n        try {\n          const user = await getUser(openedTodo.userId);\n\n          setSelectedUser(user);\n        } catch {\n          setError('Something went wrong!');\n        }\n      } else {\n        setSelectedUser(null);\n      }\n    };\n\n    loadData();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!selectedUser && openedTodo && !error\n        ? (\n          <Loader />\n        ) : (\n          <>\n            {error && (\n              <p className=\"notification is-warning\">\n                Something went wrong!\n              </p>\n            )}\n\n            {openedTodo && (\n              <div className=\"modal-card\">\n                <header className=\"modal-card-head\">\n                  <div\n                    className=\"modal-card-title has-text-weight-medium\"\n                    data-cy=\"modal-header\"\n                  >\n                    {`Todo #${openedTodo.id}`}\n                  </div>\n\n                  <button\n                    type=\"button\"\n                    className=\"delete\"\n                    data-cy=\"modal-close\"\n                    aria-label=\"modal-close\"\n                    onClick={remove}\n                  />\n                </header>\n\n                <div className=\"modal-card-body\">\n                  <p className=\"block\" data-cy=\"modal-title\">\n                    {openedTodo.title}\n                  </p>\n\n                  <p className=\"block\" data-cy=\"modal-user\">\n                    {\n                      openedTodo.completed\n                        ? <strong className=\"has-text-success\">Done</strong>\n                        : (\n                          <strong className=\"has-text-danger\">\n                            Planned\n                          </strong>\n                        )\n                    }\n\n                    {' by '}\n\n                    {selectedUser && (\n                      <a href={`mailto:${selectedUser.email}`}>\n                        {selectedUser.name}\n                      </a>\n                    )}\n                  </p>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions } from './features/todos';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nexport const App: React.FC = () => {\n  const [error, setError] = useState<string>('');\n  const openedTodo = useAppSelector(state => state.currentTodo);\n  const todoList = useAppSelector(state => state.todos);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const loadData = async () => {\n      try {\n        const todos = await getTodos();\n        const setTodos = () => dispatch(actions.setTodos(todos));\n\n        setTodos();\n      } catch {\n        setError('We can not load todos.');\n      }\n    };\n\n    loadData();\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            {error ? (\n              <p className=\"notification is-warning\">\n                Something went wrong!\n              </p>\n            ) : (\n              <>\n                <h1 className=\"title\">Todos:</h1>\n\n                <div className=\"block\">\n                  <TodoFilter />\n                </div>\n\n                <div className=\"block\">\n                  {\n                    todoList.length > 0\n                      ? <TodoList />\n                      : <Loader />\n                  }\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {openedTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\nimport { store } from './app/store';\nimport { App } from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}